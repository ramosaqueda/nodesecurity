 <div class="container px-4 py-5" id="featured-3">
    <h2 class="pb-2 border-bottom">Bienvenido</h2>
    

    <div class="row">
  <div class="col-sm-6 mb-3 mb-sm-0">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">CSRF</h5>
          <p class="card-text">Cross-Site Request Forgery (CSRF) es una vulnerabilidad en aplicaciones web que permite a un atacante engañar al navegador de un usuario para que realice acciones no deseadas en un sitio web en el que el usuario está autenticado.</p>
          <p class="card-text">El ataque CSRF aprovecha la confianza implícita que un sitio web tiene en un navegador web. El atacante crea una solicitud maliciosa que contiene una acción específica (como realizar una transferencia de fondos o cambiar la contraseña) y la envía al navegador de la víctima mientras esta está autenticada en el sitio web objetivo.</p>
        <a href="#" class="btn btn-primary">Vamos a probarlo</a>
      </div>
    </div>
  </div>
  <div class="col-sm-6">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">XSS</h5>
        <p class="card-text">XSS es una brecha de seguridad en aplicaciones web que permite la inyección de scripts maliciosos.
Sucede cuando los datos de entrada del usuario no se validan adecuadamente.
Estos ataques pueden resultar en el robo de información, manipulación de contenido y redirección a sitios web maliciosos.
Para prevenir XSS, se deben implementar prácticas de desarrollo seguro y filtrar correctamente los datos ingresados.</p>

    <p class="card-text">Para prevenir el XSS, es importante utilizar prácticas de desarrollo seguro, como validar y filtrar adecuadamente los datos de entrada y utilizar funciones de escape de caracteres al mostrar contenido generado por el usuario.
    Las actualizaciones regulares y el seguimiento de las mejores prácticas de seguridad también son fundamentales para protegerse contra esta vulnerabilidad.
    Las herramientas de seguridad automatizadas, como los escáneres de vulnerabilidades, pueden ayudar a identificar y mitigar las vulnerabilidades XSS en una aplicación web.</p>
       <a href="xss" class="btn btn-primary">Vamos a probarlo</a>
      </div>
    </div>
  </div>


  <div class="col-sm-6">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">SQL Injections</h5>
        <p class="card-text">SQL Injection es una vulnerabilidad común en aplicaciones web que permite la manipulación no autorizada de bases de datos.
Se produce cuando los datos ingresados por el usuario no se sanitizan o validan adecuadamente.
Los atacantes pueden insertar comandos SQL maliciosos para obtener información confidencial, modificar datos o incluso controlar el sistema.</p>

    <p class="card-text">La prevención de SQL Injection implica el uso de consultas parametrizadas o de preparación, evitando la concatenación de cadenas de consulta y la implementación de filtros de entrada adecuados..</p>
       <a href="#" class="btn btn-primary">Vamos a probarlo</a>
      </div>
    </div>
  </div>

  <div class="col-sm-6">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">XML XEE</h5>
        <p class="card-text">XML External Entity es una vulnerabilidad presente en las aplicaciones que analizan entradas XML. 

Por ejemplo, si un parser de XML acepta entidades externas (un tipo de entidad personalizada cuyos valores específicos se cargan desde los archivos DTD en los que están escritos), un atacante puede intervenir su contenido para leer archivos del file system o efectuar ataques como un Server Side Request Forgery (SSRF), entre otros.</p>

    <p class="card-text">Se aconseja Deshabilitar el procesamiento de definición del tipo de documento (DTD) y entidades externas XML de la aplicación. 
Asegurar que los archivos filtrados no contengan ningún tipo de información crítica o relevante, implementando la validación positiva (“whitelisting”) de la entrada del lado del servidor, el filtrado o la sanitización 
Utilizar formatos de datos menos complejos como JSON y evitar la serialización de datos sensibles siempre que sea posible.
Parchear o actualizar todos los procesadores y bibliotecas XML que son utilizados por el aplicativo.
Verificar que la funcionalidad de carga de archivos XML o XSL valida el XML entrante.</p>
       <a href="xee" class="btn btn-primary">Vamos a probarlo</a>
      </div>
    </div>
  </div>

</div>
  </div>